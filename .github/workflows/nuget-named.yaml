name: Build and Publish

on:
  push:
    branches:
      - development
      - release
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development' || github.ref == 'refs/heads/release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x' # Specify the .NET version you want to use

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: |
        # Get the short commit ID (first 6 characters of the commit hash)
        SHORT_COMMIT_ID=$(echo "${GITHUB_SHA}" | cut -c1-6)

        # Determine the output directory and package name based on the branch
        if [[ "${GITHUB_REF}" == "refs/heads/development" ]]; then
          # For development branch, include job ID in the package name
          OUTPUT_DIR="./output/development-${GITHUB_RUN_ID}"
          PACKAGE_NAME="nexus-git_${GITHUB_RUN_ID}_develop"
        elif [[ "${GITHUB_REF}" == "refs/heads/release" ]]; then
          # For release branch, use version 1.0.0 and include short commit ID
          OUTPUT_DIR="./output/release-${SHORT_COMMIT_ID}"
          PACKAGE_NAME="nexus-git_1.0.0_release_${SHORT_COMMIT_ID}"
        fi

        # Publish the project to a dynamic output directory
        echo "Publishing project to directory: ${OUTPUT_DIR}"

        dotnet publish --configuration Release --output "${OUTPUT_DIR}"

        # Dynamically find and rename the .nupkg file after publishing
        GENERATED_PACKAGE=$(find ${OUTPUT_DIR} -name "*.nupkg")
        mv "$GENERATED_PACKAGE" "${OUTPUT_DIR}/${PACKAGE_NAME}.nupkg"
        echo "PACKAGE_NAME=${PACKAGE_NAME}.nupkg" >> $GITHUB_ENV

    - name: List output directory
      run: ls -la ./output

    - name: Pack
      id: pack
      run: |
        # We don't need to pack here again, just for publishing
        echo "Package already renamed during publish process."

    - name: Publish to Nexus
      env:
        NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
        NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        NEXUS_API_KEY: ${{ secrets.NEXUS_API_KEY }}
      run: |
        # The package name is dynamically set earlier in the workflow
        echo "Pushing package: ./output/${{ env.PACKAGE_NAME }}"

        # Ensure we're pushing from development or release branch with correct file name
        if [[ "${GITHUB_REF}" == "refs/heads/development" || "${GITHUB_REF}" == "refs/heads/release" ]]; then
          # Push the package to Nexus with the dynamically generated file name
          dotnet nuget push "./output/${{ env.PACKAGE_NAME }}" --source http://52.187.94.85:8081/repository/yashm-nuget/ --api-key ${{ secrets.NEXUS_API_KEY }} 
        fi

  tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get release version from release branch
      run: |
        VERSION="1.0.0"  
        PACKAGE_NAME="nexus-git-${VERSION}.nupkg"
        echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV

    - name: Create Tag
      run: |
        # Create a new tag for version 1.0.0 on master
        git tag -a "v1.0.0" -m "Release version 1.0.0"
        git push origin v1.0.0

    - name: List output directory (Master)
      run: ls -la ./output

    - name: Publish to Nexus (Master)
      env:
        NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
        NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        NEXUS_API_KEY: ${{ secrets.NEXUS_API_KEY }}
      run: |
        echo "Pushing package: ./output/${{ env.PACKAGE_NAME }}"
        # Publish the package to Nexus with the version from the release branch
        dotnet nuget push "./output/${{ env.PACKAGE_NAME }}" --source http://52.187.94.85:8081/repository/yashm-nuget/ --api-key ${{ secrets.NEXUS_API_KEY }} 
