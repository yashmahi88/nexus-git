name: Publish Package

on:
  push:
    branches:
      - master  # Trigger on master branch only

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      package_id: ${{ steps.set_name.outputs.package_id }}
      package_version: ${{ steps.set_name.outputs.package_version }}
      tag_name: ${{ steps.set_tag.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Set package name and version
        id: set_name
        run: |
          FOLDER_NAME="nexus-git"
          
          # Get the latest tag on the master branch and increment version
          TAG=$(git tag --sort=-creatordate | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          
          if [ -z "$TAG" ]; then
            TAG="1.0.0"  # If no tag exists, default to 1.0.0
          fi
          
          # Increment the version by patch number
          IFS='.' read -r -a VERSION_PARTS <<< "$TAG"
          VERSION_PARTS[2]=$((VERSION_PARTS[2]+1))  # Increment the patch version (3rd part of the tag)
          PACKAGE_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          PACKAGE_ID="nexus-git-${PACKAGE_VERSION}"

          # Output the version and package name
          echo "PACKAGE_ID=${PACKAGE_ID}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=package_id::${PACKAGE_ID}"
          echo "::set-output name=package_version::${PACKAGE_VERSION}"

      - name: Create Git Tag
        id: set_tag
        if: github.ref == 'refs/heads/master'
        run: |
            # Fetch all tags from the remote to ensure we check the latest tags
            git fetch --tags
        
            # Get the latest tag, sort by creation date (descending)
            TAG=$(git tag --sort=-creatordate | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
            
            # If no tags exist, default to 1.0.0
            if [ -z "$TAG" ]; then
              TAG="1.0.0"
            fi
        
            # Increment the patch version
            IFS='.' read -r -a VERSION_PARTS <<< "$TAG"
            VERSION_PARTS[2]=$((VERSION_PARTS[2]+1))  # Increment the patch version (3rd part of the tag)
            PACKAGE_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
        
            # Check if the incremented version tag already exists
            TAG_EXISTS=$(git tag --list "${PACKAGE_VERSION}")
            
            # If the tag exists, keep incrementing the version until a non-existent tag is found
            while [ -n "$TAG_EXISTS" ]; do
              VERSION_PARTS[2]=$((VERSION_PARTS[2]+1))  # Increment the patch version again
              PACKAGE_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
              TAG_EXISTS=$(git tag --list "${PACKAGE_VERSION}")
            done
        
            # Now we have a unique tag, create and push it
            echo "Creating new tag: ${PACKAGE_VERSION}"
            git tag ${PACKAGE_VERSION}
            git push origin ${PACKAGE_VERSION}
        
            # Set the new tag as the output for PACKAGE_VERSION so that it can be used later
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
            echo "::set-output name=package_version::${PACKAGE_VERSION}"
          
        

      - name: Pack project
        run: |
          dotnet pack --configuration Release --output ./bin/Release /p:CustomPackageId=${{ steps.set_name.outputs.package_id }} /p:PackageVersion=${{ steps.set_name.outputs.package_version }}
          # List files in the output directory for debugging
          ls -al ./bin/Release

      - name: Upload Package as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nuget-package
          path: ./bin/Release/${{ steps.set_name.outputs.package_id }}.${{ steps.set_name.outputs.package_version }}.nupkg

  push_to_nexus:
    runs-on: ubuntu-latest
    needs: build  # This ensures the push_to_nexus job depends on the build job
    environment: nexus-approval  # This is where the manual approval comes in

    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget-package
          path: ./bin/Release

      - name: List files in Release directory
        run: ls -al ./bin/Release

      - name: Push to Nexus Repository
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_API_KEY: ${{ secrets.NEXUS_API_KEY }}
        run: |
          # Use the package ID and version from the build job outputs
          PACKAGE_ID="${{ needs.build.outputs.package_id }}"
          PACKAGE_VERSION="${{ needs.build.outputs.package_version }}"
          dotnet nuget push ./bin/Release/${PACKAGE_ID}.${PACKAGE_VERSION}.nupkg --source http://52.187.94.85:8081/repository/nuget-tag/ --api-key $NEXUS_API_KEY
          
