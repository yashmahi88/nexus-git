name: Publish Package

on:
  push:
    branches:
      - master  

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      package_id: ${{ steps.set_name.outputs.package_id }}
      package_version: ${{ steps.set_name.outputs.package_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Set package name and version
        id: set_name
        run: |
          FOLDER_NAME="nexus-git"
          
          
          git fetch --tags
          
          
          TAG=$(git tag --sort=-creatordate | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          
          if [ -z "$TAG" ]; then
            TAG="1.0.0"  
          fi
          
          
          IFS='.' read -r -a VERSION_PARTS <<< "$TAG"
          VERSION_PARTS[2]=$((VERSION_PARTS[2]+1))  
          PACKAGE_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          PACKAGE_ID="nexus-git-${PACKAGE_VERSION}"

          
          echo "PACKAGE_ID=${PACKAGE_ID}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=package_id::${PACKAGE_ID}"
          echo "::set-output name=package_version::${PACKAGE_VERSION}" 

      - name: Create Git Tag
        id: set_tag
        run: |
          
          TAG_EXISTS=$(git tag --list "${PACKAGE_VERSION}")
          if [ -z "$TAG_EXISTS" ]; then
            
            echo "Creating new tag: ${PACKAGE_VERSION}"
            git tag ${PACKAGE_VERSION}
            git push origin ${PACKAGE_VERSION}
          else
            echo "Tag ${PACKAGE_VERSION} already exists. Skipping tag creation."
          fi

      - name: Pack project
        run: |
          echo "Packing project with version: ${PACKAGE_VERSION}"
          dotnet pack --configuration Release --output ./bin/Release /p:CustomPackageId=${{ steps.set_name.outputs.package_id }} /p:PackageVersion=${{ steps.set_name.outputs.package_version }}
          
          ls -al ./bin/Release

      - name: Upload Package as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nuget-package
          path: ./bin/Release/${{ steps.set_name.outputs.package_id }}.${{ steps.set_name.outputs.package_version }}.nupkg

  push_to_nexus:
    runs-on: ubuntu-latest
    needs: build  
    environment: nexus-approval  

    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget-package
          path: ./bin/Release

      - name: List files in Release directory
        run: ls -al ./bin/Release

      - name: Push to Nexus Repository
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_API_KEY: ${{ secrets.NEXUS_API_KEY }}
        run: |
          
          echo "Pushing package ${PACKAGE_VERSION} to Nexus..."
          dotnet nuget push ./bin/Release/${{ needs.build.outputs.package_id }}.${{ needs.build.outputs.package_version }}.nupkg --source http://52.187.94.85:8081/repository/nuget-tag/ --api-key $NEXUS_API_KEY
 