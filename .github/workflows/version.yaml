name: Publish Package

on:
  push:
    branches:
      - master
    tags:
      - '*'  # Trigger on any tag push

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      package_id: ${{ steps.set_name.outputs.package_id }}
      package_version: ${{ steps.set_name.outputs.package_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Set package name and version
        id: set_name
        run: |
          echo "Checking GITHUB_REF: $GITHUB_REF"
          
          # Initialize variables
          FOLDER_NAME="nexus-git-development"
      
          # Check if this is a tag push
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract the tag name
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "Tag name extracted: ${TAG_NAME}"
            
            # Set the package id and version
            PACKAGE_ID="nexus-git-${TAG_NAME}"
            PACKAGE_VERSION="${TAG_NAME}"  # Use the tag as version (e.g., 1.0.6)
            
          else
            # Fallback for branches
            if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
              PACKAGE_ID="${FOLDER_NAME}.nexus-git"
              PACKAGE_VERSION="1.0.0-${{ github.run_id }}"
            elif [[ "${{ github.ref }}" == "refs/heads/release" ]]; then
              COMMIT_ID=$(echo "${{ github.sha }}" | cut -c1-6)
              PACKAGE_ID="nexus-git-1.0.0-release-${COMMIT_ID}"
              PACKAGE_VERSION="1.0.0-release-${COMMIT_ID}"
            elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
              PACKAGE_ID="nexus-git-1.0.1"
              PACKAGE_VERSION="1.0.1"
            fi
          fi
        
          # Output the package name and version for debugging
          echo "PACKAGE_ID=${PACKAGE_ID}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=package_id::${PACKAGE_ID}"
          echo "::set-output name=package_version::${PACKAGE_VERSION}"
      
          # Debugging output to verify the values
          echo "PACKAGE_ID: $PACKAGE_ID"
          echo "PACKAGE_VERSION: $PACKAGE_VERSION"
      
       

      - name: Pack project
        run: |
            echo "Packaging with version: ${{ steps.set_name.outputs.package_version }}"
            dotnet pack --configuration Release --output ./bin/Release \
              /p:CustomPackageId=${{ steps.set_name.outputs.package_id }} \
              /p:PackageVersion=${{ steps.set_name.outputs.package_version }}
            # List files in the output directory for debugging
            ls -al ./bin/Release
        
        

      - name: Upload Package as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nuget-package
          path: ./bin/Release/${{ steps.set_name.outputs.package_id }}.${{ steps.set_name.outputs.package_version }}.nupkg

  push_to_nexus:
    runs-on: ubuntu-latest
    needs: build
    environment: nexus-approval

    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget-package
          path: ./bin/Release

      - name: List files in Release directory
        run: ls -al ./bin/Release

      - name: Push to Nexus Repository
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_API_KEY: ${{ secrets.NEXUS_API_KEY }}
        run: |
          dotnet nuget push ./bin/Release/${{ needs.build.outputs.package_id }}.${{ needs.build.outputs.package_version }}.nupkg --source http://52.187.94.85:8081/repository/nuget-tag/ --api-key $NEXUS_API_KEY
